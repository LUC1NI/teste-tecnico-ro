@page "/clients/list"
@inject HttpClient Http

<h3>Lista de Clientes</h3>

<div class="mb-3">
    <input type="text" class="form-control" placeholder="Buscar por nome" @bind="searchTerm" @bind:event="oninput" />
</div>

<table class="table table-striped">
    <thead>
        <tr>
            <th>Nome</th>
            <th>Email</th>
            <th>CPF</th>
            <th>Data de Nascimento</th>
        </tr>
    </thead>
    <tbody>
        @if (clients is null)
        {
            <tr><td colspan="4">Carregando...</td></tr>
        }
        else if (clients.Count == 0)
        {
            <tr><td colspan="4">Nenhum cliente encontrado.</td></tr>
        }
        else
        {
            @foreach (var client in clients)
            {
                <tr>
                    <td>@client.Name</td>
                    <td>@client.Email</td>
                    <td>@client.CPF</td>
                    <td>@client.DateOfBirth.ToString("dd/MM/yyyy")</td>
                </tr>
            }
        }
    </tbody>
</table>

<nav>
    <ul class="pagination">
        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
            <button class="page-link" @onclick="PrevPage">Anterior</button>
        </li>
        <li class="page-item disabled">
            <span class="page-link">Página @currentPage de @totalPages</span>
        </li>
        <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
            <button class="page-link" @onclick="NextPage">Próxima</button>
        </li>
    </ul>
</nav>

@code {
    private List<ClientModel>? clients;
    private string searchTerm = string.Empty;
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages = 1;

    protected override async Task OnInitializedAsync()
    {
        await LoadClients();
    }

    private async Task LoadClients()
    {
        var response = await Http.GetAsync($"api/clients?search={searchTerm}&page={currentPage}&pageSize={pageSize}");
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<ClientListResponse>();
            if (result != null)
            {
                clients = result.Items;
                totalPages = (int)Math.Ceiling((double)result.TotalCount / pageSize);
            }
        }
        else
        {
            clients = new List<ClientModel>();
        }
    }

    private async Task PrevPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadClients();
        }
    }

    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await LoadClients();
        }
    }

    private async Task OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        currentPage = 1;
        await LoadClients();
    }

    private class ClientModel
    {
        public string Name { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string CPF { get; set; } = string.Empty;
        public DateTime DateOfBirth { get; set; }
    }

    private class ClientListResponse
    {
        public List<ClientModel> Items { get; set; } = new();
        public int TotalCount { get; set; }
    }
}
